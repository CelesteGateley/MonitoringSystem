module xyz {
    module fluxinc {
        module noxmonitoring {
            module corba {

                exception IllegalSensorAccessException {
                    string reason;
                };

                exception IllegalStationAccessException {
                    string reason;
                };

                enum MonitorType {
                    nitrous_oxide
                };

                struct LogEntry {
                    long long timestamp;
                    string location;
                    MonitorType type;
                    double value;
                };

                typedef sequence<MonitorType> MonitorTypeSequence;
                typedef sequence<LogEntry> LogSequence;

                interface MonitorStation {
                    MonitorTypeSequence get_available_sensors() raises(IllegalStationAccessException);
                    double get_sensor_value(in MonitorType sensor) raises(IllegalSensorAccessException, IllegalStationAccessException);
                    string get_location();
                    /** Extra Function - Enable/Disable Stations/Servers **/
                    void enable_sensor(in MonitorType sensor) raises(IllegalSensorAccessException, IllegalStationAccessException);
                    void enable_station() raises(IllegalStationAccessException);

                    boolean is_enabled();
                    boolean is_sensor_enabled(in MonitorType sensor);

                    void disable_sensor(in MonitorType sensor) raises(IllegalSensorAccessException, IllegalStationAccessException);
                    void disable_station() raises(IllegalStationAccessException);
                };

                typedef sequence<string> StringSequence;

                interface LocalControlServer {
                    void register(in string location);
                    void deregister(in string location);
                    string get_location();
                    StringSequence get_available_stations();
                    void report_value(in string location, in MonitorType type, in double sensor_value);
                    LogSequence get_logs();
                };

                interface CentralControl {
                    void register(in string location);
                    void deregister(in string location);
                    void update_stations(in string location);
                    void confirmed_alarm(in string location, in MonitorType type);
                };
            };
        };
    };
};